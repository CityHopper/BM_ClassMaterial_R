setwd('D:/New-one/BM_ClassMaterial_R')
speech1 <- readLines('ex_10-1.txt', encoding = 'UTF-8')
speech2 <- readLines('ex_10-2.txt', encoding = 'UTF-8')
speech3 <- readLines('ex_10-3.txt', encoding = 'UTF-8')
buildDictionary(ext_dic = 'woorimalsam')
pal2 <- brewer.pal(9,'Blues')[5:9]
noun1 <- sapply(speech1, extractNoun, USE.NAMES = F)
noun2 <- sapply(speech2, extractNoun, USE.NAMES = F)
noun3 <- sapply(speech3, extractNoun, USE.NAMES = F)
noun1
noun11 <- unlist(noun1)
wordcount <- table(noun11)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
sort.noun <- sort.noun[-1]
barplot (sort.noun, names.arg = names(sort.noun),
col = 'steelblue', main = '빈도수 높은 단어',
ylab = '단어 빈도수')
df <- as.data.frame(sort.noun)
df
ggplot ( df, aes(x = df$noun11, y = df$Freq)) +
geom_bar(stat = 'identity',
width = 0.7,
fill = 'steelblue') +
ggtitle('빈도수 높은 단어') +
theme(plot.title = element_text(size = 25,
face = 'bold',
colour = 'steelblue',
hjust = 0,
vjust = 1 )) +
labs(x = '명사', y='단어빈도수') +
geom_text(aes(label = df$Freq), hjust = -0.3) + # 빈도 표시
coord_flip()
wordcloud (names(wordcount), # 단어
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),# 단어 폰트 크기(최대, 최소)
min.freq = 3,     # 단어 최소 빈도
random.order = F, # 단어 출력 위치
rot.er = .1,      # 90도 회전 단어 비율
colors = pal2)    #
noun22 <- unlist(noun2)
wordcount <- table(noun22)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
sort.noun <- sort.noun[-1]
barplot (sort.noun, names.arg = names(sort.noun),
col = 'steelblue', main = '빈도수 높은 단어',
ylab = '단어 빈도수')
df <- as.data.frame(sort.noun)
df
ggplot ( df, aes(x = df$noun22, y = df$Freq)) +
geom_bar(stat = 'identity',
width = 0.7,
fill = 'steelblue') +
ggtitle('빈도수 높은 단어') +
theme(plot.title = element_text(size = 25,
face = 'bold',
colour = 'steelblue',
hjust = 0,
vjust = 1 )) +
labs(x = '명사', y='단어빈도수') +
geom_text(aes(label = df$Freq), hjust = -0.3) + # 빈도 표시
coord_flip()
wordcloud (names(wordcount), # 단어
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),# 단어 폰트 크기(최대, 최소)
min.freq = 3,     # 단어 최소 빈도
random.order = F, # 단어 출력 위치
rot.er = .1,      # 90도 회전 단어 비율
colors = pal2)    #
noun33 <- unlist(noun3)
wordcount <- table(noun33)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
sort.noun <- sort.noun[-1]
barplot (sort.noun, names.arg = names(sort.noun),
col = 'steelblue', main = '빈도수 높은 단어',
ylab = '단어 빈도수')
df <- as.data.frame(sort.noun)
df
ggplot ( df, aes(x = df$noun33, y = df$Freq)) +
geom_bar(stat = 'identity',
width = 0.7,
fill = 'steelblue') +
ggtitle('빈도수 높은 단어') +
theme(plot.title = element_text(size = 25,
face = 'bold',
colour = 'steelblue',
hjust = 0,
vjust = 1 )) +
labs(x = '명사', y='단어빈도수') +
geom_text(aes(label = df$Freq), hjust = -0.3) + # 빈도 표시
coord_flip()
wordcloud (names(wordcount), # 단어
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),# 단어 폰트 크기(최대, 최소)
min.freq = 3,     # 단어 최소 빈도
random.order = F, # 단어 출력 위치
rot.er = .1,      # 90도 회전 단어 비율
colors = pal2)    #
noun33 <- unlist(noun3)
wordcount <- table(noun33)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
sort.noun <- sort.noun[-1]
barplot (sort.noun, names.arg = names(sort.noun),
col = 'steelblue', main = '빈도수 높은 단어',
ylab = '단어 빈도수')
df <- as.data.frame(sort.noun)
df
ggplot ( df, aes(x = df$noun33, y = df$Freq)) +
geom_bar(stat = 'identity',
width = 0.7,
fill = 'steelblue') +
ggtitle('빈도수 높은 단어') +
theme(plot.title = element_text(size = 25,
face = 'bold',
colour = 'steelblue',
hjust = 0,
vjust = 1 )) +
labs(x = '명사', y='단어빈도수') +
geom_text(aes(label = df$Freq), hjust = -0.3) + # 빈도 표시
coord_flip()
wordcloud (names(wordcount), # 단어
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),# 단어 폰트 크기(최대, 최소)
min.freq = 3,     # 단어 최소 빈도
random.order = F, # 단어 출력 위치
rot.er = .1,      # 90도 회전 단어 비율
colors = pal2)    #
noun22 <- unlist(noun2)
wordcount <- table(noun22)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
sort.noun <- sort.noun[-1]
barplot (sort.noun, names.arg = names(sort.noun),
col = 'steelblue', main = '빈도수 높은 단어',
ylab = '단어 빈도수')
df <- as.data.frame(sort.noun)
df
ggplot ( df, aes(x = df$noun22, y = df$Freq)) +
geom_bar(stat = 'identity',
width = 0.7,
fill = 'steelblue') +
ggtitle('빈도수 높은 단어') +
theme(plot.title = element_text(size = 25,
face = 'bold',
colour = 'steelblue',
hjust = 0,
vjust = 1 )) +
labs(x = '명사', y='단어빈도수') +
geom_text(aes(label = df$Freq), hjust = -0.3) + # 빈도 표시
coord_flip()
wordcloud (names(wordcount), # 단어
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),# 단어 폰트 크기(최대, 최소)
min.freq = 3,     # 단어 최소 빈도
random.order = F, # 단어 출력 위치
rot.er = .1,      # 90도 회전 단어 비율
colors = pal2)    #
wordcloud (names(wordcount), # 단어
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),# 단어 폰트 크기(최대, 최소)
min.freq = 3,     # 단어 최소 빈도
random.order = F, # 단어 출력 위치
rot.er = .1,      # 90도 회전 단어 비율
colors = pal2)    #
setwd('D:/New-one/BM_ClassMaterial_R')
speech1 <- readLines('ex_10-1.txt', encoding = 'UTF-8')
speech2 <- readLines('ex_10-2.txt', encoding = 'UTF-8')
speech3 <- readLines('ex_10-3.txt', encoding = 'UTF-8')
buildDictionary(ext_dic = 'woorimalsam')
pal2 <- brewer.pal(9,'Blues')[5:9]
noun1 <- sapply(speech1, extractNoun, USE.NAMES = F)
noun2 <- sapply(speech2, extractNoun, USE.NAMES = F)
noun3 <- sapply(speech3, extractNoun, USE.NAMES = F)
noun2 <- unlist(noun) # list -> vector로 변환
noun2
wordcount <- table(noun2)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
noun33 <- unlist(noun3)
wordcount <- table(noun33)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
sort.noun <- sort.noun[-1]
barplot (sort.noun, names.arg = names(sort.noun),
col = 'steelblue', main = '빈도수 높은 단어',
ylab = '단어 빈도수')
df <- as.data.frame(sort.noun)
df
ggplot ( df, aes(x = df$noun33, y = df$Freq)) +
geom_bar(stat = 'identity',
width = 0.7,
fill = 'steelblue') +
ggtitle('빈도수 높은 단어') +
theme(plot.title = element_text(size = 25,
face = 'bold',
colour = 'steelblue',
hjust = 0,
vjust = 1 )) +
labs(x = '명사', y='단어빈도수') +
geom_text(aes(label = df$Freq), hjust = -0.3) + # 빈도 표시
coord_flip()
wordcloud (names(wordcount), # 단어
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),# 단어 폰트 크기(최대, 최소)
min.freq = 3,     # 단어 최소 빈도
random.order = F, # 단어 출력 위치
rot.er = .1,      # 90도 회전 단어 비율
colors = pal2)    #
noun22 <- unlist(noun2)
wordcount <- table(noun22)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
sort.noun <- sort.noun[-1]
sort.noun
Sys.setenv ( JAVA_HOME = 'C:/Program Files/Java/jre1.8.0_231' )
library(wordcloud)
library(wordcloud2)
library(KoNLP)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
setwd('D:/New-one/BM_ClassMaterial_R')
speech1 <- readLines('ex_10-4.txt', encoding = 'UTF-8')
buildDictionary(ext_dic = 'woorimalsam') #############
pal2 <- brewer.pal(9,'Blues')[5:9]
noun <- sapply(text, extractNoun, USE.NAMES = F) # 명사 추출
noun
speech4 <- readLines('ex_10-4.txt', encoding = 'UTF-8')
buildDictionary(ext_dic = 'woorimalsam') #############
pal2 <- brewer.pal(9,'Blues')[5:9]
noun <- sapply(speech4, extractNoun, USE.NAMES = F) # 명사 추출
noun
noun4 <- unlist(noun)
wordcount <- table(noun4)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
sort.noun <- sort.noun[-1]
barplot (sort.noun, names.arg = names(sort.noun),
col = 'steelblue', main = '빈도수 높은 단어',
ylab = '단어 빈도수')
df <- as.data.frame(sort.noun)
df
ggplot ( df, aes(x = df$noun4, y = df$Freq)) +
geom_bar(stat = 'identity',
width = 0.7,
fill = 'steelblue') +
ggtitle('빈도수 높은 단어') +
theme(plot.title = element_text(size = 25,
face = 'bold',
colour = 'steelblue',
hjust = 0,
vjust = 1 )) +
labs(x = '명사', y='단어빈도수') +
geom_text(aes(label = df$Freq), hjust = -0.3) + # 빈도 표시
coord_flip()
wordcloud (names(wordcount), # 단어
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),# 단어 폰트 크기(최대, 최소)
min.freq = 3,     # 단어 최소 빈도
random.order = F, # 단어 출력 위치
rot.er = .1,      # 90도 회전 단어 비율
colors = pal2)    # 단어 색
setwd('D:/New-one/BM_ClassMaterial_R')
speech5 <- readLines('ex_10-5.txt', encoding = 'UTF-8')
buildDictionary(ext_dic = 'woorimalsam')
pal2 <- brewer.pal(9,'Blues')[5:9]
noun5 <- sapply(speech5, extractNoun, USE.NAMES = F) # 명사 추출
noun5 <- unlist(noun5)
wordcount <- table(noun5)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
sort.noun <- sort.noun[-1]
barplot (sort.noun, names.arg = names(sort.noun),
col = 'steelblue', main = '빈도수 높은 단어',
ylab = '단어 빈도수')
df <- as.data.frame(sort.noun)
df
ggplot ( df, aes(x = df$noun5, y = df$Freq)) +
geom_bar(stat = 'identity',
width = 0.7,
fill = 'steelblue') +
ggtitle('빈도수 높은 단어') +
theme(plot.title = element_text(size = 25,
face = 'bold',
colour = 'steelblue',
hjust = 0,
vjust = 1 )) +
labs(x = '명사', y='단어빈도수') +
geom_text(aes(label = df$Freq), hjust = -0.3) + # 빈도 표시
coord_flip()
wordcloud (names(wordcount), # 단어
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),# 단어 폰트 크기(최대, 최소)
min.freq = 3,     # 단어 최소 빈도
random.order = F, # 단어 출력 위치
rot.er = .1,      # 90도 회전 단어 비율
colors = pal2)    # 단어 색
noun11 <- unlist(noun1)
wordcount <- table(noun11)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
sort.noun <- sort.noun[-1]
barplot (sort.noun, names.arg = names(sort.noun),
col = 'steelblue', main = '빈도수 높은 단어',
ylab = '단어 빈도수')
df <- as.data.frame(sort.noun)
df
wordcloud (names(wordcount), # 단어
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),# 단어 폰트 크기(최대, 최소)
min.freq = 3,     # 단어 최소 빈도
random.order = F, # 단어 출력 위치
rot.er = .1,      # 90도 회전 단어 비율
colors = pal2)    #
# 공간 시각화
# google map 사용
# 절차
# 1. R 최신 버전 설치
# 2. ggplot2 최신 버전 설치
# 3. ggmap 패키지 설치
# 4. 구글맵을 사용하기 위한 API key 획득
# 5. 구글맵을 이용한 공간 시각화 수행
# My Google maps AIP Key: AIzaSyCs0wxvwUGyb7GgWNhlNB4NdfnWh78c5Tg
library(ggmap)
help(get_googlemap)
register_google(key = 'AIzaSyCs0wxvwUGyb7GgWNhlNB4NdfnWh78c5Tg')
gc <- geocode(enc2utf8("모투에카")) # '제주'의 위도와 경도 획득
gc
cen <- as.numeric(gc) # 경도/위도를 숫자로 변환
cen
# 지도 표시
map <- get_googlemap(center=cen) # 지도 중심점 좌표
# 지도 표시
map <- get_googlemap(center=cen) # 지도 중심점 좌표
ggmap(map)
# 문6)R을 이용하여 서울, 경기, 강원 지역의 국립공원 위치를 지도 상에 마커로
# 시하되 국립공원의 이름을 함께 표시하시오.
names <- c("북한산국립공원","설악산국립공원","오대산국립공원","치악산국립공원","태백산국립공원")
gc <- geocode(enc2utf8(names))
df <- data.frame(name = names, lon = gc$lon, lat = gc$lat)
df
cen <- c(mean(df$lon), mean(df$lat))
map <- get_googlemap(center = cen,
maptype = 'roadmap',
zoom = 8)
gmap <- ggmap(map)
gmap +
geom_text(data = df,
aes(x = lon, y = lat),
size = 5,
label = df$name)
map <- get_googlemap(center = cen,
maptype = 'roadmap',
zoom = 8,
markers = gc)
gmap <- ggmap(map)
gmap +
geom_text(data = df,
aes(x = lon, y = lat),
size = 5,
label = df$name)
# 지도에 데이터 표시
wind
dim(wind)
str(wind)
sp <- sample(1:nrow(wind), 50)
df <- wind[sp,]
head(df)
cen <- c(mean(df$lon), mean(df$lat))
gc <- data.frame(lon = df$lon, lat = df$lat)
head(gc)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
ggmap(map)
spd
df
names <- c("북한산국립공원","설악산국립공원","오대산국립공원","치악산국립공원","태백산국립공원")
gc <- geocode(enc2utf8(names))
df <- data.frame(name = names, lon = gc$lon, lat = gc$lat)
df
cen <- c(mean(df$lon), mean(df$lat))
map <- get_googlemap(center = cen,
maptype = 'roadmap',
zoom = 8,
markers = gc)
gmap <- ggmap(map)
gmap +
geom_text(data = df,
aes(x = lon, y = lat),
size = 5,
label = df$name)
names <- as.character(caracc[,"district"])
class(names)
gc <- geocode(enc2utf8(names)) # enc2utf8
df <- data.frame(name = names, lon = gc$lon, lat = gc$lat,count=caracc$count)
df
cen <- c(mean(df$lon), mean(df$lat))
map <- get_googlemap(center = cen,
maptype = 'roadmap',
zoom = 12)
ggmap(map) +
geom_point(data = df,
aes(x = lon, y = lat, size = count),
alpha = 0.5, color = "navy")
setwd("C:/Users/peace/Downloads")
caracc <- read.csv("Report.csv",
sep = ",") #encoding = 'euc-kr'
# Sys.setlocale("LC_ALL","Korean")
names <- as.character(caracc[,"district"])
class(names)
gc <- geocode(enc2utf8(names)) # enc2utf8
df <- data.frame(name = names, lon = gc$lon, lat = gc$lat,count=caracc$count)
df
cen <- c(mean(df$lon), mean(df$lat))
map <- get_googlemap(center = cen,
maptype = 'roadmap',
zoom = 12)
ggmap(map) +
geom_point(data = df,
aes(x = lon, y = lat, size = count),
alpha = 0.5, color = "navy")
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6)
gmap <- ggmap(map)
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, color = 'navy') +
scale_size_continuous(range=c(1,14)) #원 크기 조절.
df <- data.frame(name = names, lon = gc$lon,
lat = gc$lat)
df
cen <- c(mean(df$lon), mean(df$lat))
map <- get_googlemap(center = cen,
maptype = 'roadmap',
zoom = 10,
size = c(640, 640),
marker = gc)
ggmap(map)
# 지도에 관광지 이름 추가
gmap <- ggmap(map)
gmap +
geom_text(data = df,
aes(x = lon, y = lat), # 텍스트 위치
size = 5, # 텍스트 크기
label = df$name) # 텍스트 이름
help(geom_text)
# 지도에 데이터 표시
wind
dim(wind)
str(wind)
sp <- sample(1:nrow(wind), 50)
df <- wind[sp,]
head(df)
cen <- c(mean(df$lon), mean(df$lat))
gc <- data.frame(lon = df$lon, lat = df$lat)
head(gc)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
ggmap(map)
# 지도에 풍속을 원의 크기로 표시
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6)
gmap <- ggmap(map)
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, color = 'navy') +
scale_size_continuous(range=c(1,14)) #원 크기 조절. 안될
wind
dim(wind)
str(wind)
sp <- sample(1:nrow(wind), 50)
df <- wind[sp,]
head(df)
cen <- c(mean(df$lon), mean(df$lat))
gc <- data.frame(lon = df$lon, lat = df$lat)
head(gc)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
ggmap(map)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6)
gmap <- ggmap(map)
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, color = 'navy') +
scale_size_continuous(range=c(1,14)) #원 크기 조
