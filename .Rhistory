#
# day12_answer.R
#
# 워드클라우드 실습
#
#문1)
#20대 국회 개원 여·야 3당 대표 국회연설문에 대해 각각 워드클라우드를
#작성하시오.
#예제소스 파일은 ‘ex_10-1.txt’, ‘ex_10-2.txt’, ‘ex_10-3.txt’이다.
Sys.setenv( JAVA_HOME = 'C:/Program Files/Java/jre1.8.0_231' )
library( wordcloud )
library( KoNLP )
library( RColorBrewer )
# 문1)20대 국회 개원 여·야 3당 대표 국회연설문에 대해 각각 워드클라우드를 작성하시오.
# 예제소스 파일은 ‘ex_10-1.txt’, ‘ex_10-2.txt’, ‘ex_10-3.txt’이다.
Sys.setenv ( JAVA_HOME = 'C:/Program Files/Java/jre1.8.0_231' )
library(wordcloud)
library(wordcloud2)
library(KoNLP)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
setwd('D:/New-one/BM_ClassMaterial_R')
speech1 <- readLines('ex_10-1.txt', encoding = 'UTF-8')
speech2 <- readLines('ex_10-2.txt', encoding = 'UTF-8')
speech3 <- readLines('ex_10-3.txt', encoding = 'UTF-8')
buildDictionary(ext_dic = 'woorimalsam')
pal2 <- brewer.pal(9,'Blues')[5:9]
noun1 <- sapply(speech1, extractNoun, USE.NAMES = F)
noun2 <- sapply(speech2, extractNoun, USE.NAMES = F)
noun3 <- sapply(speech3, extractNoun, USE.NAMES = F)
setwd('D:/GitHtub/BM_ClassMaterial_R')
speech1 <- readLines('ex_10-1.txt', encoding = 'UTF-8')
speech2 <- readLines('ex_10-2.txt', encoding = 'UTF-8')
speech3 <- readLines('ex_10-3.txt', encoding = 'UTF-8')
buildDictionary(ext_dic = 'woorimalsam')
pal2 <- brewer.pal(9,'Blues')[5:9]
noun1 <- sapply(speech1, extractNoun, USE.NAMES = F)
noun2 <- sapply(speech2, extractNoun, USE.NAMES = F)
noun3 <- sapply(speech3, extractNoun, USE.NAMES = F)
### ex_10-1.txt
noun11 <- unlist(noun1)
wordcount <- table(noun11)
wordcount
sort.noun <- sort(wordcount, decreasing = T)[1:20]
sort.noun
sort.noun <- sort.noun[-1]
barplot (sort.noun, names.arg = names(sort.noun),
col = 'steelblue', main = '빈도수 높은 단어',
ylab = '단어 빈도수')
df <- as.data.frame(sort.noun)
wordcloud (names(wordcount), # 단어
freq = wordcount, # 단어 빈도
scale = c(6, 0.7),# 단어 폰트 크기(최대, 최소)
min.freq = 3,     # 단어 최소 빈도
random.order = F, # 단어 출력 위치
rot.er = .1,      # 90도 회전 단어 비율
colors = pal2)    #
### ex_10-2.txt
noun22 <- unlist(noun2)
# 주행거리와 제동거리 사이의 회귀모델
str(cars)
head(cars)
# 산점도를 통한 선형관계 확인
plot(dist~speed, data = cars)
plot(cars)
# 주행거리와 제동거리 사이의 회귀모델
cars
head(cars)
# 회귀모델 구하기
# 종속(반응) 변수~독립 (설명) 변수 순서로 지정
model <- lm(dist~speed, cars)
model
# 회귀모델 구하기
# 종속(반응) 변수~독립 (설명) 변수 순서로 지정
model <- lm(dist~speed, cars)
model
data()
abline(model)
coef(model)
coef(model)
fitted(model)
source('D:/GitHtub/BM_YounghoonKANG_R/test191216.R', encoding = 'UTF-8', echo=TRUE)
diviance(model)
diviance(model) / length(speed)
deviance(model) / length(speed)
source('D:/GitHtub/BM_YounghoonKANG_R/test191216.R', encoding = 'UTF-8', echo=TRUE)
deviance(model)
deviance(model) / length(speed)
# Call:
#   lm(formula = dist ~ speed, data = cars)
#
# Coefficients:
#   (Intercept)        speed
# -17.579        3.932
# b값             w값
# y = 3.932*x - 17.579
abline(model)
coef(model) # 매개변수(계수) - w, b값 출력
coef(model) # 매개변수(계수) - w, b값 출력
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값
residuals(model) # 잔차: 회귀식으로 추정된 값과의 차이
# 잔차 제곱합을 평균제곱오차(MES-mean squared error)로 변환
deviance(model) / length(speed)
coef(model) # 매개변수(계수) - w, b값 출력
# 잔차 제곱합을 평균제곱오차(MES-mean squared error)로 변환
deviance(model) / length(coef(model)[speed])
# 잔차 제곱합을 평균제곱오차(MES-mean squared error)로 변환
deviance(model) / length(coef(model)[,speed])
b <- coef(model)[1]
b
deviance(model) / length(coef(model)[2])
# 잔차 제곱합을 평균제곱오차(MES-mean squared error)로 변환
deviance(model) / length(speed)
deviance(model) / length(coef(model)[2])
b <- coef(model)[1]
w <- coef(model)[2]
speed <- 21.5
# 잔차 제곱합을 평균제곱오차(MES-mean squared error)로 변환
deviance(model) / length(speed)
deviance(model) / length(coef(model)[2])
deviance(model) / length(cars$speed)
# 잔차 제곱합을 평균제곱오차(MES-mean squared error)로 변환
deviance(model) / length(speed)
deviance(model) / length(coef(model)[2])
deviance(model) / length(cars$speed)
b <- coef(model)[1]
w <- coef(model)[2]
speed <- 21.5
dist<- w * speed + b
dist
# 잔차 제곱합을 평균제곱오차(MES-mean squared error)로 변환
deviance(model) / length(speed)
deviance(model) / length(coef(model)[2])
deviance(model) / length(cars$speed)
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값
cars
# 잔차 제곱합을 평균제곱오차(MES-mean squared error)로 변환
deviance(model) / length(cars$speed)
deviance(model) / length(coef(model)[2])
df <- data.frame(speed = c(21.5, 25.0,25.5,26.0,26.5,27.0,27.5,28.0))
predict(model, df)
plot(df$speed, predict(model, df), col = 'red')
plot(df$speed, predict(model, df), col = 'red',
cex = 2, pch = 20)
abline(model)
predict(model, df) # 예측 수행 함수
plot(df$speed, predict(model, df), col = 'red',
cex = 20, pch = 20)
plot(df$speed, predict(model, df), col = 'red',
cex = 2, pch = 20)
plot(df$speed, predict(model, df), col = 'red',
cex = 2, pch = 2)
cex = 2, pch = 21abline(model)
source('D:/GitHtub/BM_YounghoonKANG_R/test191216.R', encoding = 'UTF-8', echo=TRUE)
plot(df$speed, predict(model, df), col = 'red',
cex = 2, pch = 20)
abline(model)
df <- data.frame(speed = c(21.5, 25.0,25.5,26.0,26.5,27.0,27.5,28.0))
predict(model, df) # 예측 수행 함수
plot(df$speed, predict(model, df), col = 'red',
cex = 2, pch = 20)
predict(model, df) # 예측 수행 함수
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값
# Call:
#   lm(formula = dist ~ speed, data = cars)
#
# Coefficients:
#   (Intercept)        speed
# -17.579        3.932
# b값             w값
# y = 3.932*x - 17.579
abline(model)
coef(model) # 매개변수(계수) - w, b값 출력
cars
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값
# 회귀모델 구하기
# 종속(반응) 변수~독립 (설명) 변수 순서로 지정
model <- lm(dist~speed, cars)
model
# Call:
#   lm(formula = dist ~ speed, data = cars)
#
# Coefficients:
#   (Intercept)        speed
# -17.579        3.932
# b값             w값
# y = 3.932*x - 17.579
abline(model)
coef(model) # 매개변수(계수) - w, b값 출력
cars
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값
residuals(model) # 잔차: 회귀식으로 추정된 값과의 차이
cars
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값
residuals(model) # 잔차: 회귀식으로 추정된 값과의 차이
fitted(cars)
predict(model, df) # 예측 수행 함수
residuals(model) # 잔차: 회귀식으로 추정된 값과의 차이
residuals(model) # 잔차: 회귀식으로 추정된 값과의 차이
residuals(model) # 잔차: 회귀식으로 추정된 값과의 차이(오차)
# 주행거리와 제동거리 사이의 회귀모델
str(cars)
head(cars)
# 산점도를 통한 선형관계 확인
plot(dist~speed, data = cars)
# 회귀모델 구하기
# 종속(반응) 변수~독립 (설명) 변수 순서로 지정
model <- lm(dist~speed, cars)
model
# 회귀모델 구하기
# 종속(반응) 변수~독립 (설명) 변수 순서로 지정
model <- lm(dist~speed, cars)
model
# Call:
#   lm(formula = dist ~ speed, data = cars)
#
# Coefficients:
#   (Intercept)        speed
# -17.579        3.932
# b값             w값
# y = 3.932*x - 17.579
abline(model)
# Call:
#   lm(formula = dist ~ speed, data = cars)
#
# Coefficients:
#   (Intercept)        speed
# -17.579        3.932
# b값             w값
# y = 3.932*x - 17.579
abline(model)
coef(model) # 매개변수(계수) - w, b값 출력
cars
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값
cars
residuals(model) # 잔차: 회귀식으로 추정된 값과의 차이(오차)
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값
model
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값
residuals(model) # 잔차: 회귀식으로 추정된 값과의 차이(오차)
cars
residuals(model) # 잔차: 회귀식으로 추정된 값과의 차이(오차)
speed <- cars[, 1]
pred <- w * speed + b
pred
compare <- data.frame(pred, cars [,2],
pred-cars[,2])
compare
colnames(compare) <- c("예상","실제","오차")
head(residuals(model), 3)
head(compare, 3)
speed <- cars[, 1]
speed
pred <- w * speed + b
pred
compare <- data.frame(pred, cars [,2],
pred-cars[,2])
compare
colnames(compare) <- c("예상","실제","오차")
head(fitted(model),3) # 예측
compare
colnames(compare) <- c("예상","실제","오차")
compare
head(fitted(model),3) # 예측
compare
head(fitted(model),3) # 예측
head(residuals(model), 3) # 추정된 값과의 차이
head(compare, 3)
summary(model)
str(cars)
hear(cars)
head(cars)
car_model <- lm(dist~speed, data = cars)
coef(car_model)
plot(cars)
plot(cars); abline(car_model, col = 'red')
summary(car_model)
str(women)
str(women)
head(women)
women_model <- lm(weight~height, data = women)
coef(women_model)
plot(women_model); abline(car_model, col = 'red')
str(cars)
head(cars)
car_model <- lm(dist~speed, data = cars)
car_model <- lm(dist~speed, data = cars); car_model
coef(car_model)
plot(cars_model);
plot(car_model);
str(women)
head(women)
women_model <- lm(weight~height, data = women); women_model
str(cars)
head(cars)
car_model <- lm(dist~speed, data = cars); car_model
coef(car_model)
plot(car_model);
abline(car_model, col = 'red')
abline(car_model, col = 'red')
summary(car_model)
str(women)
head(women)
women_model <- lm(weight~height, data = women); women_model
women_model <- lm(weight~height, data = women); women_model
coef(women_model)
plot(women_model);
plot(women_model);
summary(women_model)
summary(car_model)
coef(car_model)
plot(car_model);
state.x77
plot(Illiteracy~Murder, data=state.x77)
model <- lm(Illiteracy~Murder, state.x77)
model
abline(model)
coef(model)
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값 | 회귀식의 y값
residuals(model) # 잔차: 회귀식으로 추정된 값과의 차이(오차) | 다 제곱해서 더하면 deviance
# 잔차 제곱합을 평균제곱오차(MES-mean squared error)로 변환
deviance(model) / length(cars$speed)
b <- coef(model)[1]
w <- coef(model)[2]
b <- coef(model)[1]; b
w <- coef(model)[2]; w
df <- data.frame(Illiteracy = c(0.5, 1.0, 1.5))
df
plot(df$Illiteracy, predict(model, df), col = 'red',
cex = 2, pch = 20)
model
# 강영훈 1961216/191217
# 문1)state.x77 데이터셋에서 문맹률(Illiteracy)을 이용해 범죄율(Murder)을 예측하는 단순선형 회귀모델을 만드시오. 그리고 문맹률이 0.5, 1.0, 1.5일 때 범죄율을 예측하여 보시오.
state.x77
plot(Illiteracy~Murder, data=state.x77)
model <- lm(Illiteracy~Murder, state.x77)
model
abline(model)
coef(model)
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값 | 회귀식의 y값
model
plot(Illiteracy~Murder, data=state.x77)
model <- lm(Illiteracy~Murder, state.x77)
model <- lm(Illiteracy~Murder, as.data.frame(state.x77)
model
abline(model)
coef(model)
fitted(model) # 훈련 데이터에 있는 샘플에 대한 예측값 | 회귀식의 y값
residuals(model) # 잔차: 회귀식으로 추정된 값과의 차이(오차) | 다 제곱해서 더하면 deviance
# 잔차 제곱합을 평균제곱오차(MES-mean squared error)로 변환
deviance(model) / length(cars$speed)
b <- coef(model)[1]; b
w <- coef(model)[2]; w
df <- data.frame(Illiteracy = c(0.5, 1.0, 1.5))
df
predict(model, df) # 예측 수행 함수
plot(df$Illiteracy, predict(model, df), col = 'red',
cex = 2, pch = 20)
문2)
model <- lm(Illiteracy~Murder, as.data.frame(state.x77))
plot(Illiteracy~Murder, data=state.x77)
model <- lm(Illiteracy~Murder, as.data.frame(state.x77))
model
plot(Murder~Illiteracy, data=state.x77)
model <- lm(Murder~Illiteracy, as.data.frame(state.x77))
model
df <- data.frame(Illiteracy = c(0.5, 1.0, 1.5))
df
predict(model, df) # 예측 수행 함수
# 문2)trees 데이터셋에서 나무둘레(Girth)로 나무의 볼륨(Volume)을 예측하는 단선형 회귀모델을 만드시오.
# 그리고 나무 둘레가 8.5, 9.0, 9.5일 때, 나무의 볼륨(Volume)을 예측하여 보시오.
trees
plot(Volume~Girth, data=trees)
model <- lm(Volume~Girth, as.data.frame(trees))
df <- data.frame(Girth = c(8.5, 9.0, 9.5))
df
predict(model, df)
# 문2)trees 데이터셋에서 나무둘레(Girth)로 나무의 볼륨(Volume)을 예측하는 단선형 회귀모델을 만드시오.
# 그리고 나무 둘레가 8.5, 9.0, 9.5일 때, 나무의 볼륨(Volume)을 예측하여 보시오.
trees
plot(Volume~Girth, data=trees)
model2 <- lm(Volume~Girth, as.data.frame(trees))
model2
abline(model2)
df2 <- data.frame(Girth = c(8.5, 9.0, 9.5))
df2
predict(model2, df2)
model3 <- lm(pressure~temperature, as.data.frame(pressure))
model3
abline(model3)
# 문3) pressure 데이터셋에서 온도(temperature)로 기압(pressure)을 예측하는 단순선형 회귀모델을 만드시오.
# 그리고 온도가 65, 95, 155일 때 기압을 예측하여 보시오.
pressure
plot(pressure~temperature, data=pressure)
model3 <- lm(pressure~temperature, as.data.frame(pressure))
model3
abline(model3)
df3 <- data.frame(temperature = c(65, 95, 155))
df3
predict(model3, df3)
predict(model, df)
# 강영훈 1961216/191217
# 문1)state.x77 데이터셋에서 문맹률(Illiteracy)을 이용해 범죄율(Murder)을 예측하는 단순선형 회귀모델을 만드시오. 그리고 문맹률이 0.5, 1.0, 1.5일 때 범죄율을 예측하여 보시오.
state.x77
plot(Murder~Illiteracy, data=state.x77)
model <- lm(Murder~Illiteracy, as.data.frame(state.x77)); model
abline(model)
df <- data.frame(Illiteracy = c(0.5, 1.0, 1.5)); df
predict(model, df)
# 강영훈 1961216/191217
# 문1)state.x77 데이터셋에서 문맹률(Illiteracy)을 이용해 범죄율(Murder)을 예측하는 단순선형 회귀모델을 만드시오. 그리고 문맹률이 0.5, 1.0, 1.5일 때 범죄율을 예측하여 보시오.
state.x77
plot(Murder~Illiteracy, data=state.x77)
model <- lm(Murder~Illiteracy, as.data.frame(state.x77)); model
predict(model, df)
predict(model, df)
